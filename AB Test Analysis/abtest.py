# -*- coding: utf-8 -*-
"""ABTest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QRnolpxaM3GAeDE8B4E1rd75eC17vOff
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

xls=pd.ExcelFile("/content/AssignmentData.xlsx")

xls.sheet_names

ABTest=pd.read_excel(xls,sheet_name='ABTest')

ABTest.head(10)

ABTest.describe()

ABTest.isnull().sum()

import scipy.stats as stats

import scipy.stats as stats

MDE = 0.03
alpha = 0.05
power = 0.80
sample_size = 100
d =0.03 / (1 - 0.03) * (stats.norm.ppf(1 - 0.05/ 2) + stats.norm.ppf(0.80))
n = (2 * d / 0.05) ** 2
if n <= sample_size:
  print("We have sufficient sample size to conclude the test.")
else:
  print("We do not have sufficient sample size to conclude the test.")

def ab_test(control_visitors, control_conversions, treatment_visitors, treatment_conversions, confidence_level):
    control_rate = control_conversions / control_visitors
    treatment_rate = treatment_conversions / treatment_visitors
    z_score = calculate_z_score(confidence_level)
    margin_of_error = ((control_rate * (1 - control_rate) / control_visitors) +
                       (treatment_rate * (1 - treatment_rate) / treatment_visitors)) ** 0.5 * z_score
    delta = abs(control_rate - treatment_rate)
    if delta <= margin_of_error:
        return "Indeterminate"
    elif delta > margin_of_error and delta > 0:
        return "Experiment Group is Better"
    else:
        return "Control Group is Better"

def calculate_z_score(confidence_level):
    if confidence_level == 90:
        return 1.645
    elif confidence_level == 95:
        return 1.96
    elif confidence_level == 99:
        return 2.576
    else:
        raise ValueError("Invalid confidence level")

control_visitors_default = 1000
control_conversions_default = 200
treatment_visitors_default = 1000
treatment_conversions_default = 220
confidence_level_default = 95

result = a_b_test(1000, 105, 1500, 180, 95)
print(f"The result of the AB Test is: {result}")

ABTest['Conversion_Rate'] = ABTest['Clicks'] / ABTest['Visitors']
abtest_grouped =ABTest.groupby(['Group', 'Device'])['Conversion_Rate'].mean().reset_index()
abtest_grouped

ABTest['Conversion_Rate'].isnull().sum()

import seaborn as sns
abtest_clicks = ABTest.groupby(['Date', 'Device'])['Clicks'].sum().reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Clicks', hue='Device', data=abtest_clicks)
plt.title('Total Number of Clicks by Date and Device')
plt.xlabel('Date')
plt.ylabel('Total Number of Clicks')
plt.show()

!pip install streamlit

import streamlit as st
import numpy as np
from statsmodels.stats.power import TTestIndPower

st.set_page_config(page_title="AB Test Analysis", page_icon=":guardsman:", layout="wide")

st.title("AB Test Analysis")

control_visitors = 1000
control_conversions = 200
treatment_visitors = 1000
treatment_conversions = 220
confidence_level = 95

control_visitors = st.number_input("Control Group Visitors", value=control_visitors)
control_conversions = st.number_input("Control Group Conversions", value=control_conversions)
treatment_visitors = st.number_input("Treatment Group Visitors", value=treatment_visitors)
treatment_conversions = st.number_input("Treatment Group Conversions", value=treatment_conversions)
confidence_level = st.selectbox("Confidence Level", [90, 95, 99])

def ab_test(control_visitors, control_conversions, treatment_visitors, treatment_conversions, confidence_level):
    alpha = 1 - confidence_level / 100
    nobs1 = control_visitors
    nobs2 = treatment_visitors
    effect_size = TTestIndPower().solve_power(nobs1=nobs1, nobs2=nobs2, alpha=alpha)
    result = {
        "Control Conversion Rate": control_conversions / control_visitors,
        "Treatment Conversion Rate": treatment_conversions / treatment_visitors,
        "Statistical Power": 1 - TTestIndPower().power(effect_size=effect_size, nobs1=nobs1, alpha=alpha)
    }
    return result

if st.button("Perform AB Test"):
    result = ab_test(control_visitors, control_conversions, treatment_visitors, treatment_conversions, confidence_level)
    st.write(result)

